// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: src/main/proto/schema.proto

package target

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookAuthorServiceClient is the client API for BookAuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookAuthorServiceClient interface {
	// unary - synchronous
	// client will send one request and server will respond with one response.
	GetAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
	// sever streaming - Asynchronous
	// client will send one request and server will send stream of response to the client.
	GetBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (BookAuthorService_GetBooksByAuthorClient, error)
	// client streaming - Asynchronous
	// client will stream of request and server will respond with one response.
	GetExpensiveBook(ctx context.Context, opts ...grpc.CallOption) (BookAuthorService_GetExpensiveBookClient, error)
	// bi-directional streaming - Asynchronous
	// client will send stream of request and server will respond with stream of response.
	GetBooksByGender(ctx context.Context, opts ...grpc.CallOption) (BookAuthorService_GetBooksByGenderClient, error)
}

type bookAuthorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookAuthorServiceClient(cc grpc.ClientConnInterface) BookAuthorServiceClient {
	return &bookAuthorServiceClient{cc}
}

func (c *bookAuthorServiceClient) GetAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/com.devProblems.BookAuthorService/getAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAuthorServiceClient) GetBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (BookAuthorService_GetBooksByAuthorClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookAuthorService_ServiceDesc.Streams[0], "/com.devProblems.BookAuthorService/getBooksByAuthor", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookAuthorServiceGetBooksByAuthorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookAuthorService_GetBooksByAuthorClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookAuthorServiceGetBooksByAuthorClient struct {
	grpc.ClientStream
}

func (x *bookAuthorServiceGetBooksByAuthorClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookAuthorServiceClient) GetExpensiveBook(ctx context.Context, opts ...grpc.CallOption) (BookAuthorService_GetExpensiveBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookAuthorService_ServiceDesc.Streams[1], "/com.devProblems.BookAuthorService/getExpensiveBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookAuthorServiceGetExpensiveBookClient{stream}
	return x, nil
}

type BookAuthorService_GetExpensiveBookClient interface {
	Send(*Book) error
	CloseAndRecv() (*Book, error)
	grpc.ClientStream
}

type bookAuthorServiceGetExpensiveBookClient struct {
	grpc.ClientStream
}

func (x *bookAuthorServiceGetExpensiveBookClient) Send(m *Book) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookAuthorServiceGetExpensiveBookClient) CloseAndRecv() (*Book, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookAuthorServiceClient) GetBooksByGender(ctx context.Context, opts ...grpc.CallOption) (BookAuthorService_GetBooksByGenderClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookAuthorService_ServiceDesc.Streams[2], "/com.devProblems.BookAuthorService/getBooksByGender", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookAuthorServiceGetBooksByGenderClient{stream}
	return x, nil
}

type BookAuthorService_GetBooksByGenderClient interface {
	Send(*Book) error
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookAuthorServiceGetBooksByGenderClient struct {
	grpc.ClientStream
}

func (x *bookAuthorServiceGetBooksByGenderClient) Send(m *Book) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookAuthorServiceGetBooksByGenderClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookAuthorServiceServer is the server API for BookAuthorService service.
// All implementations must embed UnimplementedBookAuthorServiceServer
// for forward compatibility
type BookAuthorServiceServer interface {
	// unary - synchronous
	// client will send one request and server will respond with one response.
	GetAuthor(context.Context, *Author) (*Author, error)
	// sever streaming - Asynchronous
	// client will send one request and server will send stream of response to the client.
	GetBooksByAuthor(*Author, BookAuthorService_GetBooksByAuthorServer) error
	// client streaming - Asynchronous
	// client will stream of request and server will respond with one response.
	GetExpensiveBook(BookAuthorService_GetExpensiveBookServer) error
	// bi-directional streaming - Asynchronous
	// client will send stream of request and server will respond with stream of response.
	GetBooksByGender(BookAuthorService_GetBooksByGenderServer) error
	mustEmbedUnimplementedBookAuthorServiceServer()
}

// UnimplementedBookAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookAuthorServiceServer struct {
}

func (UnimplementedBookAuthorServiceServer) GetAuthor(context.Context, *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookAuthorServiceServer) GetBooksByAuthor(*Author, BookAuthorService_GetBooksByAuthorServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBookAuthorServiceServer) GetExpensiveBook(BookAuthorService_GetExpensiveBookServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExpensiveBook not implemented")
}
func (UnimplementedBookAuthorServiceServer) GetBooksByGender(BookAuthorService_GetBooksByGenderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooksByGender not implemented")
}
func (UnimplementedBookAuthorServiceServer) mustEmbedUnimplementedBookAuthorServiceServer() {}

// UnsafeBookAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookAuthorServiceServer will
// result in compilation errors.
type UnsafeBookAuthorServiceServer interface {
	mustEmbedUnimplementedBookAuthorServiceServer()
}

func RegisterBookAuthorServiceServer(s grpc.ServiceRegistrar, srv BookAuthorServiceServer) {
	s.RegisterService(&BookAuthorService_ServiceDesc, srv)
}

func _BookAuthorService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAuthorServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.devProblems.BookAuthorService/getAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAuthorServiceServer).GetAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAuthorService_GetBooksByAuthor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Author)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookAuthorServiceServer).GetBooksByAuthor(m, &bookAuthorServiceGetBooksByAuthorServer{stream})
}

type BookAuthorService_GetBooksByAuthorServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type bookAuthorServiceGetBooksByAuthorServer struct {
	grpc.ServerStream
}

func (x *bookAuthorServiceGetBooksByAuthorServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _BookAuthorService_GetExpensiveBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookAuthorServiceServer).GetExpensiveBook(&bookAuthorServiceGetExpensiveBookServer{stream})
}

type BookAuthorService_GetExpensiveBookServer interface {
	SendAndClose(*Book) error
	Recv() (*Book, error)
	grpc.ServerStream
}

type bookAuthorServiceGetExpensiveBookServer struct {
	grpc.ServerStream
}

func (x *bookAuthorServiceGetExpensiveBookServer) SendAndClose(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookAuthorServiceGetExpensiveBookServer) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BookAuthorService_GetBooksByGender_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookAuthorServiceServer).GetBooksByGender(&bookAuthorServiceGetBooksByGenderServer{stream})
}

type BookAuthorService_GetBooksByGenderServer interface {
	Send(*Book) error
	Recv() (*Book, error)
	grpc.ServerStream
}

type bookAuthorServiceGetBooksByGenderServer struct {
	grpc.ServerStream
}

func (x *bookAuthorServiceGetBooksByGenderServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookAuthorServiceGetBooksByGenderServer) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookAuthorService_ServiceDesc is the grpc.ServiceDesc for BookAuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookAuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.devProblems.BookAuthorService",
	HandlerType: (*BookAuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAuthor",
			Handler:    _BookAuthorService_GetAuthor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getBooksByAuthor",
			Handler:       _BookAuthorService_GetBooksByAuthor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getExpensiveBook",
			Handler:       _BookAuthorService_GetExpensiveBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "getBooksByGender",
			Handler:       _BookAuthorService_GetBooksByGender_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/main/proto/schema.proto",
}
